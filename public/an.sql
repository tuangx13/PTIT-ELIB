CREATE DATABASE SQLQuery;

USE SQLQuery;

CREATE TABLE yan (
    title VARCHAR(255),
    NAME VARCHAR(255),
    link VARCHAR(255),
    keyword VARCHAR(255),
    content TEXT
);

INSERT INTO yan (title, NAME, link, keyword, content) VALUES
('Python', 'Taking Input In Python', 'https://www.geeksforgeeks.org/taking-input-in-python/?ref=outind', 'input() raw_input() typecasting string integer float prompt type() datetime user input', 'In Python, user input is obtained using the input() function, which always returns a string. If numeric input is required, conversion using int() or float() is necessary. For handling multiple lines of input, loops can be employed to process each line efficiently. Additionally, input() accepts an optional prompt string to display before user input is entered.'),
('Python', 'Python Operators', 'https://www.geeksforgeeks.org/python-operators/?ref=outind', 'Operators Arithmetic Comparison Logical Bitwise Assignment Identity Membership Precedence Ternary', 'Python provides various types of operators, including arithmetic, comparison, logical, assignment, bitwise, membership, and identity operators. Arithmetic operators like +, -, and * handle basic math, while comparison operators such as == and > compare values. Logical operators (and, or, not) combine conditions. Assignment operators (=, +=, etc.) assign values to variables. Bitwise operators work at the binary level, and membership operators (in, not in) check for element presence in collections. Identity operators (is, is not) compare object identities.'),
('Python', 'Python List', 'https://www.geeksforgeeks.org/python-lists/?ref=outind', 'Mutable Append Extend Insert Slice Comprehension Pop Remove Reverse Index', 'Python lists are ordered, mutable collections that can store elements of different data types. Lists are defined using square brackets [] and support operations like indexing, slicing, and iteration. Common methods include append() to add elements, remove() or pop() to delete elements, and sort() or reverse() for rearranging. Lists can also be concatenated using + and repeated with *. You can check membership with in and find the length of a list using len(). Since lists are mutable, their contents can be modified after creation.'),
('Python', 'Python Tuples', 'https://www.geeksforgeeks.org/python-tuples/?ref=outind', 'Immutable Ordered Indexing Tuple Packing Unpacking Concatenation Slicing Nested Tuples Hashable Mixed Data Types', 'Python tuples are ordered, immutable collections, meaning their elements cannot be changed after creation. They are defined using parentheses () and can store elements of different data types. Like lists, tuples support indexing, slicing, and iteration. Common operations include accessing elements, checking membership with in, and finding the length with len(). Since tuples are immutable, they do not support methods like append() or remove(), but they are often used when immutability and data integrity are needed. Tuples can also be nested and concatenated.'),
('Python', 'Sets in Python', 'https://www.geeksforgeeks.org/sets-in-python/?ref=outind', 'Set Unordered Immutable elements Hash Table Union Intersection Difference Frozen Set Unique Type Casting', 'Python sets are unordered collections of unique elements, defined using curly braces {} or the set() function. Since sets do not allow duplicates, they are useful for membership testing and eliminating redundant data. Common operations include adding elements with add(), removing elements with remove() or discard(), and checking membership using in. Sets support mathematical operations like union (|), intersection (&), and difference (-). Since sets are unordered, they do not support indexing or slicing. Python also provides frozensets, which are immutable versions of sets.'),
('Python', 'Python Dictionary', 'https://www.geeksforgeeks.org/python-dictionary/?ref=outind', 'Key-Value Pairs Mutable Ordered Unique Keys Nested Dictionaries Accessing Adding/Updating Deleting Methods Comprehensions', 'Python dictionaries are unordered collections of key-value pairs, defined using curly braces {} with keys and values separated by colons. Keys must be unique and immutable, while values can be of any data type. Common operations include accessing values by key, adding or updating key-value pairs, and deleting items using del or pop(). You can check for the existence of a key using in and get all keys, values, or items using keys(), values(), and items() methods. Dictionaries are useful for mapping relationships and lookups.'),
('Python', 'Python Conditional Statements', 'https://www.geeksforgeeks.org/python3-if-if-else-nested-if-if-elif-statements/?ref=outind', 'if else elif condition nested statements block syntax true false', 'In Python, conditional statements control the flow of execution based on specified conditions. The if statement executes a block of code if the condition is true. The if..else statement provides an alternative block that executes when the condition is false. Nested if statements allow placing one if statement inside another to check multiple conditions sequentially. The if-elif statement enables checking multiple expressions for truth and executing a block of code corresponding to the first true condition. The else block can be omitted, allowing for flexibility in handling different scenarios. Indentation is crucial, as it defines the scope of the conditional blocks.'),
('Python', 'Python Loops', 'https://www.geeksforgeeks.org/loops-in-python/?ref=outind', 'loop while for iterator nested continue break else condition sequence', 'In Python, loops are used to execute a block of code repeatedly. The for loop iterates over a sequence (like a list, tuple, or string) or other iterable objects, executing the block for each item. The while loop continues to execute as long as its condition is true, making it suitable for scenarios where the number of iterations is not predetermined. Nested loops allow placing one loop inside another, enabling complex iterations over multiple data sets. Python provides control statements like break to exit a loop and continue to skip the current iteration and proceed to the next one. Proper indentation is essential to define the scope of loops.'),
('Python', 'Python Functions', 'https://www.geeksforgeeks.org/python-functions/?ref=outind', 'Function Parameters Arguments Return Docstring Recursion Lambda Default Arguments Keyword Arguments Scope', 'In Python, functions are reusable blocks of code that perform a specific task and are defined using the def keyword. Functions can accept parameters (inputs) and return values using the return statement. They help improve code organization and modularity. Python supports default parameters, allowing functions to be called with fewer arguments than defined. Functions can also have variable-length arguments using *args for non-keyword arguments and **kwargs for keyword arguments. Additionally, Python allows the creation of lambda functions, which are small anonymous functions defined using the lambda keyword. Proper use of functions enhances code readability and maintainability.'),
('Python', 'Python OOPS Concept', 'https://www.geeksforgeeks.org/python-oops-concepts/?ref=outind', 'Class Object Inheritance Encapsulation Polymorphism Abstraction Constructor Method Attribute Self', 'Python supports Object-Oriented Programming (OOP) concepts, which include classes, objects, inheritance, encapsulation, and polymorphism. Classes are blueprints for creating objects and encapsulate data for the object, typically defining attributes and methods. Objects are instances of classes, representing specific entities with attributes and behaviors. Inheritance allows one class to inherit attributes and methods from another, promoting code reuse and hierarchical relationships. Encapsulation restricts direct access to some object components, allowing for controlled interaction through methods, enhancing data protection. Polymorphism enables methods to do different things based on the object calling them, allowing for flexible code. OOP principles in Python help structure code more intuitively and facilitate easier maintenance and scalability.'),
('Python', 'Python DSA', 'https://www.geeksforgeeks.org/python-data-structures-and-algorithms/?ref=outind', 'List (Danh sách) Tuple (Bộ dữ liệu không thay đổi) Set (Tập hợp) Dictionary (Từ điển) Stack (Ngăn xếp) Queue (Hàng đợi) Tree (Cây) Graph (Đồ thị) Algorithm (Giải thuật) Recursion (Đệ quy)', 'Learning Data Structures and Algorithms (DSA) with Python focuses on organizing and manipulating data efficiently. Key data structures include lists, tuples, sets, and dictionaries, each serving distinct purposes. Fundamental algorithms cover searching techniques like linear and binary search, as well as sorting methods such as bubble sort, merge sort, and quicksort. Mastering these concepts is crucial for problem-solving and optimizing code performance.'),
('Python', 'Linked List', 'https://www.geeksforgeeks.org/python-linked-list/?ref=outind', 'Linked List Node Data Reference Insert Remove Traversal Update Size Head', 'In Python, a linked list is a linear data structure consisting of nodes, where each node contains data and a reference (or link) to the next node in the sequence. Unlike arrays, linked lists allow for efficient insertion and deletion of elements since they do not require contiguous memory allocation. The basic types of linked lists include:'),
('Python', 'Python Exception Handling', 'https://www.geeksforgeeks.org/python-exception-handling/?ref=outind', 'Exceptions SyntaxError TypeError ZeroDivisionError try except finally raise error handling debugging', 'Python exception handling is a mechanism that allows developers to manage errors and exceptions that may occur during program execution. It helps maintain the normal flow of the program even when unexpected events arise. The primary components of exception handling include: try block: Code that may raise an exception is placed within this block. except block: This block defines how to handle specific exceptions that arise in the try block. else block: Optional; executes if the try block does not raise any exceptions.'),
('Python', 'Python File Handling', 'https://www.geeksforgeeks.org/file-handling-python/?ref=outind', 'File Object open() read() write() append() close() mode EOL (End of Line) tell()', 'File handling in Python involves the process of reading from and writing to files on a disk. Python provides built-in functions to manage file operations using the open() function, which takes a file name and mode as arguments (e.g., r for reading, w for writing, and a for appending). Once a file is opened, various methods can be used:'),
('Python', 'Python List Exercise', 'https://www.geeksforgeeks.org/python-list-exercise/?ref=outind', 'Interchange Swap Length Maximum Minimum Count Positive Negative Unique Substring', 'Python list exercises typically focus on practicing the manipulation and usage of lists, a fundamental data structure in Python. Common exercises include tasks like creating lists, accessing and modifying elements, and using built-in methods such as append(), remove(), and sort(). Other exercises may involve iterating through lists using loops, performing list comprehensions for concise data transformations, and using slicing to access sublists. Advanced exercises can include nested lists and operations like merging or filtering lists based on conditions. These exercises enhance familiarity with list operations, improve problem-solving skills, and reinforce understanding of data handling in Python, making them essential for beginners and experienced programmers alike.'),
('Python', 'Python String Exercise', 'https://www.geeksforgeeks.org/python-string-exercise/?ref=outind', 'Palindrome Vowels Frequency Uncommon Duplicate Substring Rotation Character Length Random', 'Python string exercises focus on practicing the manipulation and usage of strings, which are immutable sequences of characters. Common exercises include creating strings, accessing individual characters, and slicing to obtain substrings. Participants often practice using built-in string methods like upper(), lower(), strip(), replace(), and split() to modify and analyze string data. Other tasks may involve string formatting techniques, such as using f-strings or the format() method to create dynamic strings. Exercises can also include searching for substrings, counting occurrences of specific characters, and checking for palindromes. These activities enhance understanding of string operations and improve problem-solving skills in Python programming, making them valuable for learners at all levels.'),
('Python', 'Python Tuple Exercise', 'https://www.geeksforgeeks.org/python-tuple-exercise/?ref=outind', 'Tuple Maximum Minimum Frequency Conversion Flatten Sort Combination Distinct Extraction', 'Python tuple exercises focus on practicing the usage and manipulation of tuples, which are immutable ordered collections of elements. Common exercises involve creating tuples, accessing elements, and unpacking tuples into individual variables. Participants may practice using built-in functions such as count() and index() to analyze tuple data. Other tasks can include concatenating and slicing tuples, as well as converting tuples to lists and vice versa. Exercises may also explore nested tuples and their applications, such as representing coordinates or complex data structures. Working with tuples helps reinforce understanding of data organization and immutability in Python, making these exercises valuable for both beginners and experienced programmers.'),
('Python', 'Python Dictionary Exercise', 'https://www.geeksforgeeks.org/python-dictionary-exercise/?ref=outind', 'Dictionary Key Value Sorting Merging Frequency Conversion Nested Anagram Counter', 'Python dictionary exercises focus on practicing the usage and manipulation of dictionaries, which are mutable collections of key-value pairs. Common exercises include creating dictionaries, accessing and modifying values using keys, and adding new key-value pairs. Participants may practice using built-in methods such as get(), keys(), values(), and items() to interact with dictionary data effectively. Other tasks can involve iterating through dictionaries using loops, merging multiple dictionaries, and filtering key-value pairs based on conditions. Exercises might also explore nested dictionaries and their applications, such as storing complex data structures or configurations. Working with dictionaries enhances understanding of data organization and retrieval in Python, making these exercises essential for learners and practitioners alike.'),
('Python', 'Python Set Exercise', 'https://www.geeksforgeeks.org/python-set-exercise/?ref=outind', 'Set Size Intersection Union Conversion Common Elements Difference Panagram Heterogram Vowels', 'Python set exercises focus on practicing the usage and manipulation of sets, which are unordered collections of unique elements. Common exercises include creating sets, adding and removing elements, and performing basic operations like union, intersection, and difference. Participants may practice using built-in methods such as add(), remove(), discard(), and clear() to manage set data effectively. Other tasks can involve checking for membership using the in keyword, converting lists or tuples to sets, and exploring set comprehensions for creating sets in a concise manner. Exercises might also explore advanced operations, such as symmetric difference and subset checks, as well as applications of sets in real-world scenarios, such as removing duplicates from a collection. Working with sets enhances understanding of unique data handling and improves problem-solving skills in Python programming.'),
('Python', 'Python Design Patterns', 'https://www.geeksforgeeks.org/python-design-patterns/?ref=outind', 'Design Patterns Creational Patterns Structural Patterns Behavioral Patterns Factory Method Singleton Adapter Observer Strategy Memento', 'Python design patterns are reusable solutions to common software design problems, promoting best practices and code organization. Key categories include: Creational Patterns, such as the Singleton (ensures a single instance of a class) and Factory Method (creates objects without specifying their class). Structural Patterns, including the Adapter (allows incompatible interfaces to work together) and Decorator (adds functionality to an object dynamically). Behavioral Patterns, such as the Observer (notifies multiple objects about changes in another object\'s state) and Strategy (allows runtime selection of algorithms). Understanding these patterns helps developers create more efficient, maintainable, and scalable code, improving collaboration and design practices in software development.'),
('Python', 'Python Programming Examples', 'https://www.geeksforgeeks.org/python-programming-examples/?ref=outind', 'Python Programming Code Examples Functions Data Structures Algorithms File Handling String Manipulation Libraries', 'Python programs are scripts or applications written in the Python programming language that execute specific tasks or solve particular problems. They can range from simple scripts, such as a basic calculator or a file manager, to complex applications like web servers or data analysis tools. Common components of Python programs include: Variables and Data Types: Using integers, floats, strings, lists, tuples, dictionaries, and sets to store and manipulate data. Control Structures: Implementing loops (for and while) and conditional statements (if, else) to control the flow of execution. Functions and Modules: Organizing code into reusable functions and using modules to break programs into manageable parts. Error Handling: Managing exceptions to ensure robust program execution. Python programs are highly versatile and can be used for web development, data analysis, automation, machine learning, and more. Their readability and ease of use make Python a popular choice among both beginners and experienced developers.'),
('Python', 'Python Practice Questions', 'https://www.geeksforgeeks.org/python-exercises-practice-questions-and-solutions/?ref=outind', 'Practice Exercises Conditional Statements Lists Strings Tuples Dictionaries Functions OOP (Object-Oriented Programming) File Handling', 'Python exercises with practice questions and solutions are designed to help learners strengthen their programming skills through hands-on practice. These exercises typically cover a wide range of topics, including: Basic Syntax and Operations: Simple questions that involve variables, data types, and basic operations to familiarize beginners with Python syntax. Control Structures: Exercises focused on loops and conditionals, such as creating simple games or solving problems based on user input. Data Structures: Questions that involve manipulating lists, tuples, sets, and dictionaries, including tasks like sorting and filtering data. Functions and Modules: Exercises that require defining and using functions to solve problems, encouraging code reusability and modular design. File Handling: Tasks that involve reading from and writing to files, helping learners understand data persistence. Algorithms: Implementing basic algorithms such as sorting and searching to enhance problem-solving skills. Each exercise typically includes a problem statement, code solutions, and explanations to help learners understand the concepts better. These practice questions are essential for building confidence and proficiency in Python programming, preparing learners for real-world applications.'),
('Programming Languages', 'C', 'https://www.geeksforgeeks.org/c-programming-language/?ref=outind', 'Pointer Struct Array Function Header File Dynamic Memory Preprocessor Standard Library Macro Buffer', 'The C language is a mid-level programming language that combines the efficiency of low-level programming with the flexibility of high-level programming. Known for its simple syntax, manual memory management, and high performance, C is ideal for system development, such as operating systems, compilers, and embedded software. It provides fundamental control structures like loops, conditionals, and functions, and supports procedural programming with pointers and arrays. As a foundation for many modern languages like C++, Java, and Python, C plays a crucial role in education and system software development.'),
('Programming Languages', 'C++', 'https://www.geeksforgeeks.org/c-plus-plus/?ref=outind', 'Class Object Inheritance Polymorphism Constructor Template Namespace Operator Overloading Virtual Function STL (Standard Template Library)', 'C++ is a powerful mid-level programming language that extends C with object-oriented features, allowing both low-level system programming and high-level application development. It retains C’s efficiency and flexibility but adds classes, inheritance, polymorphism, and encapsulation, making it well-suited for large-scale software systems. C++ supports both procedural and object-oriented programming, as well as features like operator overloading, templates, and the Standard Template Library (STL) for efficient data manipulation. Widely used in game development, real-time simulations, and performance-critical applications, C++ is foundational in software engineering and competitive programming.'),
('Programming Languages', 'Javascript', 'https://www.geeksforgeeks.org/learn-javascript-js-roadmap-for-beginners/?ref=outind', 'Event Callback DOM (Document Object Model) Asynchronous Promise Closure Hoisting Arrow Function Prototype JSON (JavaScript Object Notation)', 'JavaScript is a high-level, interpreted programming language primarily used for creating dynamic content on web pages. Known for its versatility and event-driven, non-blocking architecture, JavaScript enables both front-end and back-end development through environments like Node.js. It supports functional, object-oriented, and asynchronous programming styles, making it ideal for responsive, interactive web applications. JavaScript is often used alongside HTML and CSS, with frameworks and libraries like React, Vue, and Angular to simplify development. As a core language of the web, JavaScript is essential for modern web development and mobile app ecosystems.'),
('Programming Languages', 'PHP', 'https://www.geeksforgeeks.org/learn-javascript-js-roadmap-for-beginners/?ref=outind', 'Variable Array Session Cookie MySQL Function Form Handling Include POST/GET PDO (PHP Data Objects)', 'PHP is a high-level, server-side scripting language widely used for web development to create dynamic and interactive web pages. Known for its ease of integration with HTML and databases like MySQL, PHP is suited for building robust web applications, content management systems, and e-commerce platforms. PHP offers a straightforward syntax and extensive libraries, making it accessible to beginners while being powerful enough for complex applications. It supports procedural and object-oriented programming, and frameworks like Laravel and Symfony streamline development. As a widely adopted language for backend development, PHP remains foundational in web application development.'),
('Programming Languages', 'Go language', 'https://www.geeksforgeeks.org/perl-programming-language/?ref=outind', 'Goroutine Channel Interface Struct Package Concurrency Error Handling Reflection Slice Go Module', 'Go (or Golang) is a statically-typed, compiled programming language developed by Google, known for its simplicity, concurrency support, and performance. Designed for efficiency and ease of use, Go features a clean syntax, garbage collection, and powerful standard libraries, making it well-suited for networked systems, microservices, and cloud-native applications. Go’s concurrency model, based on goroutines and channels, simplifies building scalable applications. It also includes a built-in toolchain for testing, formatting, and dependency management. Due to its reliability and speed, Go is widely adopted for backend development in modern, distributed systems and DevOps tooling.'),
('Programming Languages', 'Kotlin', 'https://www.geeksforgeeks.org/kotlin-programming-language/?ref=outind', 'Null Safety Coroutines Data Class Extension Function Higher-Order Function Sealed Class Lambda Expression Companion Object Type Inference Android Development', 'Kotlin is a modern, statically-typed programming language developed by JetBrains, fully interoperable with Java and designed to enhance productivity and safety. Known for its concise syntax and expressive features, Kotlin reduces boilerplate code while improving readability, making it ideal for Android development, web applications, and backend services. It supports functional and object-oriented programming, and includes features like null safety, coroutines for asynchronous programming, and extension functions. Officially supported by Google for Android, Kotlin is widely used for mobile apps, but also gains popularity in server-side development due to its compatibility with existing Java frameworks.'),
('System Design', 'what is Sytem Design', 'https://www.geeksforgeeks.org/what-is-system-design-learn-system-design/?ref=outind', 'Architecture Components Interactions Scalability Reliability Data Flow Performance User Requirements Trade-offs Optimization', 'System design is the process of defining a system’s architecture, components, and interactions to meet specific requirements. It involves analyzing the requirements, planning the high-level structure, and detailing the low-level design for efficient, scalable, and reliable systems. Key concepts in system design include scalability, load balancing, data partitioning, and fault tolerance, which ensure the system can handle growth and perform well under load. System design is crucial in building complex applications like web services, distributed systems, and enterprise applications, making it a fundamental skill in software engineering for creating robust and maintainable systems.'),
('System Design', 'Key Terminologies in System design', 'https://www.geeksforgeeks.org/what-is-system-design-learn-system-design/?ref=outind', 'Latency Throughput Bandwidth Load Balancer Cache Partitioning Replica Sharding Microservices Consistency', 'Key terminologies in system design include foundational concepts for building scalable and efficient systems. Scalability refers to a system''s ability to handle growth, while latency and throughput measure response time and data processing speed. Load balancing distributes workloads across servers, and caching temporarily stores data for quick access. Data partitioning and sharding break down data for easier management, while replication duplicates data to improve reliability. Consistency, availability, and fault tolerance ensure data accuracy, uptime, and resilience. Understanding these terms is essential for designing robust, high-performance systems.'),
('System Design', 'Analysis and Architecture of systems', 'https://www.geeksforgeeks.org/analysis-of-monolithic-and-distributed-systems-learn-system-design/?ref=outind', 'Requirements Analysis Use Case Diagrams System Components Data Flow Diagrams Architectural Patterns Modularity Scalability Planning Reliability Deployment Strategy Security Model', 'Analysis and architecture of systems involve evaluating requirements and designing the system’s structure to ensure it meets specified needs. Requirements analysis identifies user needs and constraints, while system architecture defines high-level components and their relationships. Use case diagrams illustrate interactions between users and the system, and data flow diagrams show how data moves through the system. Key architectural patterns guide the design, such as microservices or monolithic architectures. Modularity ensures components can be developed and maintained independently, while considerations for scalability and reliability address future growth and system resilience. This process is crucial for creating efficient, maintainable systems that fulfill user expectations.'),
('System Design', 'Scalability in System Design', 'https://www.geeksforgeeks.org/analysis-of-monolithic-and-distributed-systems-learn-system-design/?ref=outind', 'Vertical Scaling Horizontal Scaling Load Balancing Sharding Caching Replication Auto-scaling Data Partitioning Stateless Architecture Rate Limiting', 'Scalability in system design refers to a system''s ability to handle increased load or demand without compromising performance. It encompasses vertical scaling, which involves adding resources to a single node, and horizontal scaling, which involves adding more nodes to distribute the load. Key strategies for achieving scalability include load balancing to evenly distribute traffic, caching to reduce response times, and sharding to partition data across multiple databases. Replication improves availability and fault tolerance by duplicating data across different servers. By planning for scalability, designers ensure that systems can grow efficiently while maintaining performance, reliability, and user experience.'),
('System Design', 'Databases in System Design', 'https://www.geeksforgeeks.org/complete-reference-to-databases-in-designing-systems/?ref=outind', 'SQL NoSQL Indexing Normalization Denormalization ACID CAP Theorem Replication Sharding Transactions', 'Databases in system design are crucial for storing, managing, and retrieving data efficiently. There are two primary types: SQL (relational) databases, which use structured query language and ensure data integrity through ACID properties, and NoSQL (non-relational) databases, which offer flexibility in data storage and scalability. Key concepts include normalization, which organizes data to minimize redundancy, and denormalization, which may improve read performance at the cost of data integrity. Indexing speeds up data retrieval, while replication enhances availability and fault tolerance. Understanding the right database choice and design principles is essential for building scalable, reliable systems that meet application requirements.'),
('System Design', 'High level Design or HLD', 'https://www.geeksforgeeks.org/what-is-high-level-design-learn-system-design/?ref=outind', 'Architecture Diagram Modules Data Flow Interfaces Components APIs Technology Stack Database Design Integration Points Scalability', 'High-Level Design (HLD) is a phase in system design that outlines the overall architecture and structure of a system, focusing on its major components and their interactions. HLD includes creating architecture diagrams to visualize system components, such as databases, servers, and external systems. It defines modules and their responsibilities, along with data flow to show how information moves within the system. Key aspects of HLD also involve specifying interfaces between components and identifying the technology stack to be used. Additionally, HLD addresses scalability and performance considerations, ensuring that the design can meet future demands. This phase serves as a blueprint for the subsequent Low-Level Design (LLD) and implementation.'),
('System Design', 'Low Level Design of LLD', 'https://www.geeksforgeeks.org/what-is-low-level-design-or-lld-learn-system-design/?ref=outind', 'Class Diagrams Sequence Diagrams Data Structures Algorithms APIs and Methods Database Schema State Machines Interaction Logic Error Handling Code Flow', 'Low-Level Design (LLD) is the detailed phase of system design that focuses on the implementation specifics of each component outlined in the High-Level Design (HLD). LLD includes creating class diagrams to define data structures and relationships, and sequence diagrams to illustrate interactions between objects. It specifies data structures, algorithms, and the logic required for each module, along with detailed API specifications and method signatures. LLD also involves defining error handling mechanisms and state machines to manage the flow of the application. This phase ensures that developers have a clear and actionable plan to implement the system, with well-defined interactions and responsibilities for each component, facilitating efficient coding and integration.'),
('System Design', 'Complete System Design Tutorial', 'https://www.geeksforgeeks.org/system-design-tutorial/?ref=outind', 'Introduction to System Design Gathering Requirements High-Level Architecture Low-Level Design Database Design API Design Scalability Considerations Security Best Practices Testing and Monitoring Deployment and Maintenance', 'A complete system design tutorial encompasses the entire process of designing a system, from initial concept to implementation. It begins with an introduction to system design, covering fundamental concepts and objectives. The tutorial progresses to gathering requirements, where user needs and system constraints are identified. Following this, participants learn about creating a high-level architecture, defining major components and their interactions. The tutorial then delves into low-level design, detailing the implementation specifics of each component, including data structures and algorithms. Next, it covers database design principles, emphasizing the choice between SQL and NoSQL systems. API design is also highlighted, showcasing how to create efficient and clear interfaces. Scalability, performance optimization, and security considerations are integral parts of the tutorial. Finally, the tutorial discusses testing, monitoring, and deployment strategies, ensuring participants understand how to maintain and evolve the system post-launch. This comprehensive approach equips learners with the skills needed to tackle real-world system design challenges effectively.'),
('System Design', 'Software Design Patterns', 'https://www.geeksforgeeks.org/software-design-patterns/?ref=outind', 'Singleton Observer Factory Strategy Decorator Adapter Facade Builder Prototype Command', 'Software design patterns are standardized solutions to common design problems in software development, promoting code reuse and maintainability. They are categorized into creational patterns (e.g., Singleton, Factory) for object creation, structural patterns (e.g., Adapter, Decorator) for organizing classes and objects, and behavioral patterns (e.g., Observer, Strategy) for managing interactions between objects. Each pattern provides a template that includes a context, problem description, and proposed solution, along with its advantages and disadvantages. By utilizing design patterns, developers can create systems that are more understandable, extensible, and consistent, enhancing collaboration and efficiency in software projects.'),
('Java', 'Java Tutorial', 'https://www.geeksforgeeks.org/java/?ref=outind', 'Syntax Data Types Variables Control Structures Object-Oriented Programming (OOP) Methods Exception Handling File I/O Collections Multithreading', 'A Java Tutorial is a structured guide designed to teach Java programming from the ground up. It typically begins with an introduction to Java, covering its features, installation of the Java Development Kit (JDK), and basic syntax. The tutorial progresses to data types, control structures, and object-oriented programming (OOP) principles such as classes, inheritance, and polymorphism. Advanced topics may include exception handling, file I/O, and multithreading. Each section usually contains hands-on examples and exercises to reinforce learning, equipping learners with the skills to build real-world applications. By the end of the tutorial, participants are prepared to explore Java frameworks and develop more complex software solutions.'),
('Java', 'Data Types', 'https://www.geeksforgeeks.org/data-types-in-java/?ref=outind', 'Primitive Types Reference Types int double char boolean Arrays Casting Type Safety Null', 'Data types in programming define the type of data a variable can hold, influencing how data is stored, processed, and manipulated. In Java, data types are categorized into primitive types and reference types. Primitive types include int (integer), double (floating-point number), char (character), and boolean (true or false), which are fundamental and built into the language. Reference types, on the other hand, refer to objects and can include user-defined classes and arrays. Choosing the appropriate data type is essential for optimizing memory usage and ensuring efficient data processing. Each data type has specific operations that can be performed on it and certain limits on the values it can hold. Understanding data types is crucial for effective programming, as it affects variable declaration, control flow, and overall application performance.'),
('Java', 'Variables', 'https://www.geeksforgeeks.org/data-types-in-java/?ref=outind', 'Declaration Initialization Scope Data Type Assignment Local Variable Instance Variable Static Variable Constant Naming Convention', 'Variables are fundamental components in programming that act as containers for storing data values. In Java, variables must be declared with a specific data type that defines the kind of data they can hold, such as int, double, or String. Variables are assigned values using the assignment operator (=) and can be modified throughout the program. Java supports different types of variables, including local variables, which are declared within methods and only accessible within that scope, and instance variables, which belong to a class and can be accessed by any method in that class. Static variables are shared among all instances of a class. Understanding how to declare, initialize, and use variables effectively is crucial for managing data and building functional programs. Proper variable naming conventions and scope management also contribute to code readability and maintainability.'),
('Java', 'Operators', 'https://www.geeksforgeeks.org/operators-in-java/?ref=outind', 'Arithmetic Operators Relational Operators Logical Operators Assignment Operators Bitwise Operators Unary Operators Ternary Operator Increment/Decrement Precedence Short-circuit Evaluation', 'Operators are special symbols in programming that perform operations on variables and values. In Java, operators are categorized into several types: Arithmetic Operators: These include +, -, *, /, and % for performing basic mathematical operations like addition, subtraction, multiplication, division, and modulus. Relational Operators: These operators, such as ==, !=, >, <, >=, and <=, are used to compare two values and return a boolean result (true or false). Logical Operators: Operators like && (AND), || (OR), and ! (NOT) are used to perform logical operations, combining boolean expressions. Assignment Operators: These include = for assigning values, as well as compound operators like +=, -=, *=, and /= for updating variables. Bitwise Operators: Operators such as &, |, ^, ~, <<, and >> are used for manipulating binary data at the bit level. Understanding operators is essential for performing calculations, making comparisons, and controlling the flow of a program, thereby enhancing the ability to write effective and efficient Java.'),
('Java', 'Flow Control in Java', 'https://www.geeksforgeeks.org/decision-making-javaif-else-switch-break-continue-jump/?ref=outind', 'Conditional Statements if Statement else Statement switch Statement Loops for Loop while Loop do-while Loop break Statement continue Statement', 'Flow control in Java refers to the mechanisms that determine the order of statement execution within a program. It includes conditional statements like if, else if, and switch, which execute specific code blocks based on boolean expressions. Loops are also essential for repetitive tasks, with the for, while, and do-while constructs allowing for various iterations based on conditions. Additionally, branching statements such as break and continue enable control over loop execution, allowing for early termination or skipping iterations. Understanding flow control is crucial for implementing complex logic and creating responsive programs that can adapt to different scenarios effectively.')

-- Sau đó chạy riêng câu lệnh sau:
SELECT * FROM yan;

